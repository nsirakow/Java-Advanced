You should create a Strategy Pattern. If we have multiple ways to do a task (let's say sort a collection) it allows the client to choose the way that most fits his needs.
Create a class Person that holds name and age. Create 2 Comparators for Person (classes which implement the Comparator<Person> interface).
The first comparator should compare people based on the length of their name as a first parameter.
If 2 people have a name with the same length, perform a case-insensitive compare based on the first letter of their name instead.
The second comparator should compare them based on their age. Create 2 TreeSets of type Person. The first should implement the name comparator and the second should implement the age comparator.
On the first line of input you will receive a number N. On each of the next N lines you will receive information about people in the format "<name> <age>".
Add the people from the input into both sets (both sets should hold all the people passed in from the input).
Foreach the sets and print each person from the set on a new line in the same format that you received them. Start with the set that implements the name comparator.

Examples:

Input                Output                                  |      Input                  Output
                                                             |
3                    Joro 100                                |      5                      asen 33
Pesho 20             Pesho 20                                |      Ivan 17                Ivan 17
Joro 100             Pencho 1                                |      asen 33                Joro 3
Pencho 1             Pesho 20                                |      Stoqn 25               Nasko 99
                     Joro 100                                |      Nasko 99               Stoqn 25
                                                             |      Joro 3                 Joro 3
                                                             |                             Ivan 17
                                                             |                             Stoqn 25
                                                             |                             asen 33
                                                             |                             Nasko 99
